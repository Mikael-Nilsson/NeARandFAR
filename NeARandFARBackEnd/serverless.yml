# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: NeARandFARBackEnd
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-offline

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore3.1
  environment: ${file(env.yml):${self:custom.stage}}

# you can overwrite defaults here
#  stage: dev
  region: eu-north-1

  # vpc:
  #   securityGroupIds:
  #     - Ref: LambdaSecurityGroup
  #   subnetIds:
  #     - subnet-cb7eb3b0

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

custom:
  stage: ${opt:stage, self:provider.stage}
  config: ${file(env.yml):${self:custom.stage}}

package:
  individually: true

functions:

  token:
    handler: NeARandFARBackEnd::NeARandFARBackEnd.Auth.AuthHandler::token

    package:
      artifact: bin/Release/netcoreapp3.1/nearandfarbackend.zip

    events:
      - http:
          path: token
          method: post
          cors: true

          
#  mongoGetAll:
#    handler: NeARandFARBackEnd::NeARandFARBackEnd.Mongo.MongoHandler::getAll
#
#    package:
#      artifact: bin/Release/netcoreapp3.1/nearandfarbackend.zip
#
#    events:
#      - http:
#          path: mongo/getAll/{collection}
#          method: ANY
#          cors: true
#
#  mongoGet:
#    handler: NeARandFARBackEnd::NeARandFARBackEnd.Mongo.MongoHandler::get
#
#    package:
#      artifact: bin/Release/netcoreapp3.1/nearandfarbackend.zip
#
#    events:
#      - http:
#          path: mongo/get/{id}
#          method: get
#          cors: true

  getEntity:
    handler: NeARandFARBackEnd::NeARandFARBackEnd.Entities.EntityHandler::getEntity

    package:
      artifact: bin/Release/netcoreapp3.1/nearandfarbackend.zip

    events:
      - http:
          path: entities/{id}
          method: get
          cors: true

  getEntities:
    handler: NeARandFARBackEnd::NeARandFARBackEnd.Entities.EntityHandler::getEntities
    package:
      artifact: bin/Release/netcoreapp3.1/nearandfarbackend.zip

    events:
      - http:
          path: entities
          method: get
          cors: true
  
  # hello:
  #   handler: AssemblyName::SpaceWithName.HandlerClass::Hello
  #   # you can add packaging information here
  #   package:
  #     artifact: bin/Release/netcoreapp3.1/mongo.zip
  #     #  exclude:
  #       #    - exclude-me.js
  #       #    - exclude-me-dir/**
  #   events:
  #     - http:
  #       path: hello
  #       method: get
  #       cors: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     LambdaSecurityGroup:
#       Type: AWS::EC2::SecurityGroup
#       Properties:
#         GroupName: NeARandFAR-Lambda-sg-${self:custom.stage}
#         GroupDescription: Allow lambdas to do everything
#         VpcId: ${self:custom.config.vpcId}
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
